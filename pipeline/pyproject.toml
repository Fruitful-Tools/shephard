[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "shepherd-pipeline"
version = "0.1.0"
description = "Prefect-powered audio transcription and summarization pipeline"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Shepherd Team", email = "team@shepherd.ai"},
]
requires-python = ">=3.12"
dependencies = [
    "prefect>=3.0.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "httpx>=0.25.0",
    "python-multipart>=0.0.6",
    "yt-dlp>=2023.12.30",
    "moviepy>=1.0.3",
    "pydub>=0.25.1",
    "supabase>=2.0.0",
    "python-dotenv>=1.0.0",
    "typer>=0.9.0",
    "rich>=13.0.0",
    "loguru>=0.7.0",
    "opencc-python-reimplemented>=0.1.7",
    "requests>=2.31.0",
]

[dependency-groups]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "ruff>=0.7.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
    "coverage[toml]>=7.3.0",
    "httpx>=0.25.0",
    "typos>=1.16.0",
    "commitizen>=3.10.0",
    "types-requests>=2.32.4.20250611",
]

[project.scripts]
shepherd-pipeline = "shepherd_pipeline.cli.main:main"

[tool.ruff]
line-length = 88
target-version = "py312"
# Exclude commonly ignored directories (Ruff's smart defaults)
exclude = [
    ".bzr", ".direnv", ".eggs", ".git", ".git-rewrite",
    ".hg", ".ipynb_checkpoints", ".mypy_cache", ".nox",
    ".pants.d", ".pyenv", ".pytest_cache", ".pytype",
    ".ruff_cache", ".svn", ".tox", ".venv", ".vscode",
    "__pypackages__", "_build", "buck-out", "build",
    "dist", "node_modules", "site-packages", "venv"
]

[tool.ruff.lint]
# Start with essential rule groups, then gradually add more
select = ["E", "F"]  # pycodestyle errors, Pyflakes
extend-select = [
    "I",    # isort
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "SIM",  # flake8-simplify
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "Q",    # flake8-quotes
    "ANN",  # flake8-annotations
    "TCH",  # flake8-type-checking
]

# Common ignores for modern Python projects
ignore = [
    "E501",   # Line too long (let formatter handle)
    "B027",   # Allow non-abstract empty methods in abstract base classes
    "C901",   # Ignore complexity
    "ANN101", # Missing type annotation for self in method
    "ANN102", # Missing type annotation for cls in classmethod
]

# Enable auto-fixing for safe rules
fixable = [
    "F401",   # Remove unused imports
    "I001",   # Import sorting
    "UP017",  # datetime.timezone.utc
    "C4",     # Comprehension improvements
    "SIM",    # Simplification suggestions
]

# Per-file ignores
[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["ANN", "ARG", "S101"]  # Allow missing annotations and assertions in tests
"**/migrations/**/*" = ["ANN", "ARG"]     # Ignore annotations in migrations

[tool.ruff.format]
# Enable code formatting in docstrings
docstring-code-format = true
docstring-code-line-length = 72
# Use double quotes for strings
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["shepherd_pipeline"]
force-sort-within-sections = true

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Relax some rules for test files
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_decorators = false
warn_no_return = false

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["shepherd_pipeline"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/.*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.typos.default]
extend-ignore-re = [
    # Ignore hex patterns
    "[0-9a-fA-F]{8,}",
    # Ignore base64-like patterns
    "[A-Za-z0-9+/]{20,}={0,2}",
]

[tool.typos.default.extend-words]
# Add project-specific words that should not be flagged as typos
shepherd = "shepherd"

[tool.typos.files]
extend-exclude = [
    "*.lock",
    "*.min.js",
    "*.min.css",
    "dist/",
    "build/",
    ".venv/",
    "__pycache__/",
    "*.pyc",
    ".git/",
]

[tool.prefect]
logging.level = "INFO"

# Conventional Commits configuration
[tool.commitizen]
name = "cz_conventional_commits"
version = "0.1.0"
tag_format = "v$version"
version_files = [
    "pyproject.toml:version"
]
